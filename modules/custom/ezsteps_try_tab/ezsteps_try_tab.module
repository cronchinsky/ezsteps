<?php

/**
 * Implements hook_field_extra_fields().
 * 
 * Adds the extra items (i.e. WYSIWYG) to the manage display tab.
 */
function ezsteps_try_tab_field_extra_fields() {
  $extra['node']['activity'] = array(
    'display' => array(
      'extra items' => array(
        'label' => t('Extra Items'),
        'description' => t('WYSIWYG, Register form, etc'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_node_view_alter().
 * 
 * Adds the extra items to the node.
 */
function ezsteps_try_tab_node_view_alter(&$build) {
  //dsm($build);
  $info = field_extra_fields_get_display('node', 'activity', $build ['#view_mode']);
  if ($info['extra items']['visible']) {
    $build['extra items'] = array(
      '#weight' => $info['extra items']['weight'],
      '#prefix' => '<div class="ezsteps-extra-items">',
      '#suffix' => '</div>',
      '#markup' => ezsteps_try_tab_get_extra_items($build['#node']),
    );
  }
}

/**
 * Prepares the extra items content for a node.
 *
 * @param node $node
 *   The node to which the extra items will be added.
 * @return string
 *   HTML string of content to be added.
 */
function ezsteps_try_tab_get_extra_items($node) {
  //dsm('extra items');
  if (!empty($node->field_activity_try_extra_items[LANGUAGE_NONE])) {
    $content = "";
    foreach ($node->field_activity_try_extra_items[LANGUAGE_NONE] as $extra_item) {
      $item = $extra_item['value'];
      switch ($item)  {
        case 'WYSIWYG':
        	$profile = wysiwyg_get_profile('full_html');
        	wysiwyg_load_editor($profile);
        	drupal_add_js(drupal_get_path('module', 'ezsteps_try_tab') . '/js/wysiwyg-try.js');
        	// Load the WYSIWYG form and any existing text
        	$extra_text = (!empty($node->field_activity_try_extra_text[LANGUAGE_NONE]) ? $node->field_activity_try_extra_text[LANGUAGE_NONE][0]['value'] : '');
        	$content .= render(drupal_get_form('ezsteps_try_tab_wysiwyg_form', $extra_text));
        	break;
        case 'Register-form':
        	$content .= render(drupal_get_form('user_register_form'));
        	break;
        case 'Poll':
        	$poll = views_embed_view('poll_interactive', 'block_1');
        	$content .= $poll;
        	break;
        case 'Lightbox':
        	//dsm($node);
        	$colorbox = render(field_view_field('node', $node, 'field_activity_try_extra_link'));
        	//dsm($colorbox);
        	$content .= $colorbox;
        	break;
      }
    }
    return $content;
  }
}

function ezsteps_try_tab_wysiwyg_form($form, $form_state, $extra) {
  $form['try_wysiwyg'] = array(
    '#type' => 'text_format',
    '#format' => 'full_html',
    '#default_value' => $extra,
  );
  
  return $form;
}

/**
 * Implements hook_node_view().
 * 
 * Adds the activity title to the try tab.
 */
function ezsteps_try_tab_node_view($node) {
  if ($node->type == 'activity') {
    $header = "<div class='ezsteps-try-tab-header'>";
    if (arg(2) <> '0') {
    	$header .= t('Activity') . " ";
    	$header .= arg(2) . ": ";
    }
    $header .= check_plain($node->title);
    $header .="</div>";
    $node->content['field_activity_try_intro_text']['#prefix'] = $header;
  }
}

function ezsteps_try_tab_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    // set various CKEditor option to address problem with extra p tags being added
    $settings['enterMode'] = 2;
    $settings['forceEnterMode'] = true;
    $settings['shiftEnterMode'] = 1;
    $settings['height'] = 200;
  
    // Example of setting customConfig option. Just note it gets overridden by values in $settings.
    //$settings['customConfig'] = 'path/to/my/config.js';
  }
}